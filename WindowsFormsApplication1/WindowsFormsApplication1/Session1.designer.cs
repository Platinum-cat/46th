#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApplication1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Session1")]
	public partial class Session1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertAircraft(Aircraft instance);
    partial void UpdateAircraft(Aircraft instance);
    partial void DeleteAircraft(Aircraft instance);
    partial void InsertAirport(Airport instance);
    partial void UpdateAirport(Airport instance);
    partial void DeleteAirport(Airport instance);
    partial void InsertCabinType(CabinType instance);
    partial void UpdateCabinType(CabinType instance);
    partial void DeleteCabinType(CabinType instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertFlightFood(FlightFood instance);
    partial void UpdateFlightFood(FlightFood instance);
    partial void DeleteFlightFood(FlightFood instance);
    partial void InsertFlightFoodReservation(FlightFoodReservation instance);
    partial void UpdateFlightFoodReservation(FlightFoodReservation instance);
    partial void DeleteFlightFoodReservation(FlightFoodReservation instance);
    partial void InsertFlightReservation(FlightReservation instance);
    partial void UpdateFlightReservation(FlightReservation instance);
    partial void DeleteFlightReservation(FlightReservation instance);
    partial void InsertFlightStatus(FlightStatus instance);
    partial void UpdateFlightStatus(FlightStatus instance);
    partial void DeleteFlightStatus(FlightStatus instance);
    partial void InsertLuggage(Luggage instance);
    partial void UpdateLuggage(Luggage instance);
    partial void DeleteLuggage(Luggage instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertSeatLayout(SeatLayout instance);
    partial void UpdateSeatLayout(SeatLayout instance);
    partial void DeleteSeatLayout(SeatLayout instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    #endregion
		
		public Session1DataContext() : 
				base(global::WindowsFormsApplication1.Properties.Settings.Default.Session1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Session1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Session1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Session1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Session1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Aircraft> Aircraft
		{
			get
			{
				return this.GetTable<Aircraft>();
			}
		}
		
		public System.Data.Linq.Table<Airport> Airport
		{
			get
			{
				return this.GetTable<Airport>();
			}
		}
		
		public System.Data.Linq.Table<CabinType> CabinType
		{
			get
			{
				return this.GetTable<CabinType>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Country
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<FlightFood> FlightFood
		{
			get
			{
				return this.GetTable<FlightFood>();
			}
		}
		
		public System.Data.Linq.Table<FlightFoodReservation> FlightFoodReservation
		{
			get
			{
				return this.GetTable<FlightFoodReservation>();
			}
		}
		
		public System.Data.Linq.Table<FlightReservation> FlightReservation
		{
			get
			{
				return this.GetTable<FlightReservation>();
			}
		}
		
		public System.Data.Linq.Table<FlightStatus> FlightStatus
		{
			get
			{
				return this.GetTable<FlightStatus>();
			}
		}
		
		public System.Data.Linq.Table<Luggage> Luggage
		{
			get
			{
				return this.GetTable<Luggage>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Route> Route
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedule
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<SeatLayout> SeatLayout
		{
			get
			{
				return this.GetTable<SeatLayout>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Aircraft")]
	public partial class Aircraft : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AircraftId;
		
		private string _Name;
		
		private string _FirstSeatsLayout;
		
		private int _FirstSeatsAmount;
		
		private string _BusinessSeatsLayout;
		
		private int _BusinessSeatsAmount;
		
		private string _EconomySeatsLayout;
		
		private int _EconomySeatsAmount;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntitySet<SeatLayout> _SeatLayout;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAircraftIdChanging(int value);
    partial void OnAircraftIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFirstSeatsLayoutChanging(string value);
    partial void OnFirstSeatsLayoutChanged();
    partial void OnFirstSeatsAmountChanging(int value);
    partial void OnFirstSeatsAmountChanged();
    partial void OnBusinessSeatsLayoutChanging(string value);
    partial void OnBusinessSeatsLayoutChanged();
    partial void OnBusinessSeatsAmountChanging(int value);
    partial void OnBusinessSeatsAmountChanged();
    partial void OnEconomySeatsLayoutChanging(string value);
    partial void OnEconomySeatsLayoutChanged();
    partial void OnEconomySeatsAmountChanging(int value);
    partial void OnEconomySeatsAmountChanged();
    #endregion
		
		public Aircraft()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._SeatLayout = new EntitySet<SeatLayout>(new Action<SeatLayout>(this.attach_SeatLayout), new Action<SeatLayout>(this.detach_SeatLayout));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AircraftId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AircraftId
		{
			get
			{
				return this._AircraftId;
			}
			set
			{
				if ((this._AircraftId != value))
				{
					this.OnAircraftIdChanging(value);
					this.SendPropertyChanging();
					this._AircraftId = value;
					this.SendPropertyChanged("AircraftId");
					this.OnAircraftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSeatsLayout", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstSeatsLayout
		{
			get
			{
				return this._FirstSeatsLayout;
			}
			set
			{
				if ((this._FirstSeatsLayout != value))
				{
					this.OnFirstSeatsLayoutChanging(value);
					this.SendPropertyChanging();
					this._FirstSeatsLayout = value;
					this.SendPropertyChanged("FirstSeatsLayout");
					this.OnFirstSeatsLayoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstSeatsAmount", DbType="Int NOT NULL")]
		public int FirstSeatsAmount
		{
			get
			{
				return this._FirstSeatsAmount;
			}
			set
			{
				if ((this._FirstSeatsAmount != value))
				{
					this.OnFirstSeatsAmountChanging(value);
					this.SendPropertyChanging();
					this._FirstSeatsAmount = value;
					this.SendPropertyChanged("FirstSeatsAmount");
					this.OnFirstSeatsAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessSeatsLayout", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessSeatsLayout
		{
			get
			{
				return this._BusinessSeatsLayout;
			}
			set
			{
				if ((this._BusinessSeatsLayout != value))
				{
					this.OnBusinessSeatsLayoutChanging(value);
					this.SendPropertyChanging();
					this._BusinessSeatsLayout = value;
					this.SendPropertyChanged("BusinessSeatsLayout");
					this.OnBusinessSeatsLayoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessSeatsAmount", DbType="Int NOT NULL")]
		public int BusinessSeatsAmount
		{
			get
			{
				return this._BusinessSeatsAmount;
			}
			set
			{
				if ((this._BusinessSeatsAmount != value))
				{
					this.OnBusinessSeatsAmountChanging(value);
					this.SendPropertyChanging();
					this._BusinessSeatsAmount = value;
					this.SendPropertyChanged("BusinessSeatsAmount");
					this.OnBusinessSeatsAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomySeatsLayout", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EconomySeatsLayout
		{
			get
			{
				return this._EconomySeatsLayout;
			}
			set
			{
				if ((this._EconomySeatsLayout != value))
				{
					this.OnEconomySeatsLayoutChanging(value);
					this.SendPropertyChanging();
					this._EconomySeatsLayout = value;
					this.SendPropertyChanged("EconomySeatsLayout");
					this.OnEconomySeatsLayoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomySeatsAmount", DbType="Int NOT NULL")]
		public int EconomySeatsAmount
		{
			get
			{
				return this._EconomySeatsAmount;
			}
			set
			{
				if ((this._EconomySeatsAmount != value))
				{
					this.OnEconomySeatsAmountChanging(value);
					this.SendPropertyChanging();
					this._EconomySeatsAmount = value;
					this.SendPropertyChanged("EconomySeatsAmount");
					this.OnEconomySeatsAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aircraft_Schedule", Storage="_Schedule", ThisKey="AircraftId", OtherKey="AircraftId")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aircraft_SeatLayout", Storage="_SeatLayout", ThisKey="AircraftId", OtherKey="AircraftId")]
		public EntitySet<SeatLayout> SeatLayout
		{
			get
			{
				return this._SeatLayout;
			}
			set
			{
				this._SeatLayout.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Aircraft = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Aircraft = null;
		}
		
		private void attach_SeatLayout(SeatLayout entity)
		{
			this.SendPropertyChanging();
			entity.Aircraft = this;
		}
		
		private void detach_SeatLayout(SeatLayout entity)
		{
			this.SendPropertyChanging();
			entity.Aircraft = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airport")]
	public partial class Airport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IATACode;
		
		private string _AirportName;
		
		private string _CityCode;
		
		private EntitySet<Route> _Route;
		
		private EntitySet<Route> _Route1;
		
		private EntityRef<City> _City;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIATACodeChanging(string value);
    partial void OnIATACodeChanged();
    partial void OnAirportNameChanging(string value);
    partial void OnAirportNameChanged();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    #endregion
		
		public Airport()
		{
			this._Route = new EntitySet<Route>(new Action<Route>(this.attach_Route), new Action<Route>(this.detach_Route));
			this._Route1 = new EntitySet<Route>(new Action<Route>(this.attach_Route1), new Action<Route>(this.detach_Route1));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IATACode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IATACode
		{
			get
			{
				return this._IATACode;
			}
			set
			{
				if ((this._IATACode != value))
				{
					this.OnIATACodeChanging(value);
					this.SendPropertyChanging();
					this._IATACode = value;
					this.SendPropertyChanged("IATACode");
					this.OnIATACodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AirportName
		{
			get
			{
				return this._AirportName;
			}
			set
			{
				if ((this._AirportName != value))
				{
					this.OnAirportNameChanging(value);
					this.SendPropertyChanging();
					this._AirportName = value;
					this.SendPropertyChanged("AirportName");
					this.OnAirportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityCode", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Route", Storage="_Route", ThisKey="IATACode", OtherKey="DepartureAirportIATA")]
		public EntitySet<Route> Route
		{
			get
			{
				return this._Route;
			}
			set
			{
				this._Route.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Route1", Storage="_Route1", ThisKey="IATACode", OtherKey="ArrivalAirportIATA")]
		public EntitySet<Route> Route1
		{
			get
			{
				return this._Route1;
			}
			set
			{
				this._Route1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Airport", Storage="_City", ThisKey="CityCode", OtherKey="CityCode", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Airport.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Airport.Add(this);
						this._CityCode = value.CityCode;
					}
					else
					{
						this._CityCode = default(string);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Airport = this;
		}
		
		private void detach_Route(Route entity)
		{
			this.SendPropertyChanging();
			entity.Airport = null;
		}
		
		private void attach_Route1(Route entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = this;
		}
		
		private void detach_Route1(Route entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CabinType")]
	public partial class CabinType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CabinTypeId;
		
		private string _CabinTypeName;
		
		private EntitySet<FlightReservation> _FlightReservation;
		
		private EntitySet<SeatLayout> _SeatLayout;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCabinTypeIdChanging(int value);
    partial void OnCabinTypeIdChanged();
    partial void OnCabinTypeNameChanging(string value);
    partial void OnCabinTypeNameChanged();
    #endregion
		
		public CabinType()
		{
			this._FlightReservation = new EntitySet<FlightReservation>(new Action<FlightReservation>(this.attach_FlightReservation), new Action<FlightReservation>(this.detach_FlightReservation));
			this._SeatLayout = new EntitySet<SeatLayout>(new Action<SeatLayout>(this.attach_SeatLayout), new Action<SeatLayout>(this.detach_SeatLayout));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinTypeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CabinTypeId
		{
			get
			{
				return this._CabinTypeId;
			}
			set
			{
				if ((this._CabinTypeId != value))
				{
					this.OnCabinTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CabinTypeId = value;
					this.SendPropertyChanged("CabinTypeId");
					this.OnCabinTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CabinTypeName
		{
			get
			{
				return this._CabinTypeName;
			}
			set
			{
				if ((this._CabinTypeName != value))
				{
					this.OnCabinTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CabinTypeName = value;
					this.SendPropertyChanged("CabinTypeName");
					this.OnCabinTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CabinType_FlightReservation", Storage="_FlightReservation", ThisKey="CabinTypeId", OtherKey="CabinTypeId")]
		public EntitySet<FlightReservation> FlightReservation
		{
			get
			{
				return this._FlightReservation;
			}
			set
			{
				this._FlightReservation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CabinType_SeatLayout", Storage="_SeatLayout", ThisKey="CabinTypeId", OtherKey="CabinTypeId")]
		public EntitySet<SeatLayout> SeatLayout
		{
			get
			{
				return this._SeatLayout;
			}
			set
			{
				this._SeatLayout.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.CabinType = this;
		}
		
		private void detach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.CabinType = null;
		}
		
		private void attach_SeatLayout(SeatLayout entity)
		{
			this.SendPropertyChanging();
			entity.CabinType = this;
		}
		
		private void detach_SeatLayout(SeatLayout entity)
		{
			this.SendPropertyChanging();
			entity.CabinType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityCode;
		
		private string _CityName;
		
		private string _CountryCode;
		
		private EntitySet<Airport> _Airport;
		
		private EntityRef<Country> _Country;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityCodeChanging(string value);
    partial void OnCityCodeChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    #endregion
		
		public City()
		{
			this._Airport = new EntitySet<Airport>(new Action<Airport>(this.attach_Airport), new Action<Airport>(this.detach_Airport));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityCode
		{
			get
			{
				return this._CityCode;
			}
			set
			{
				if ((this._CityCode != value))
				{
					this.OnCityCodeChanging(value);
					this.SendPropertyChanging();
					this._CityCode = value;
					this.SendPropertyChanged("CityCode");
					this.OnCityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Airport", Storage="_Airport", ThisKey="CityCode", OtherKey="CityCode")]
		public EntitySet<Airport> Airport
		{
			get
			{
				return this._Airport;
			}
			set
			{
				this._Airport.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.City.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.City.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airport(Airport entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Airport(Airport entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _CountryName;
		
		private EntitySet<City> _City;
		
		private EntitySet<FlightReservation> _FlightReservation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    #endregion
		
		public Country()
		{
			this._City = new EntitySet<City>(new Action<City>(this.attach_City), new Action<City>(this.detach_City));
			this._FlightReservation = new EntitySet<FlightReservation>(new Action<FlightReservation>(this.attach_FlightReservation), new Action<FlightReservation>(this.detach_FlightReservation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_City", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<City> City
		{
			get
			{
				return this._City;
			}
			set
			{
				this._City.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_FlightReservation", Storage="_FlightReservation", ThisKey="CountryCode", OtherKey="CountryCode")]
		public EntitySet<FlightReservation> FlightReservation
		{
			get
			{
				return this._FlightReservation;
			}
			set
			{
				this._FlightReservation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_City(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlightFood")]
	public partial class FlightFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FoodId;
		
		private string _Name;
		
		private string _Description;
		
		private decimal _Price;
		
		private string _Img;
		
		private EntitySet<FlightFoodReservation> _FlightFoodReservation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodIdChanging(int value);
    partial void OnFoodIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnImgChanging(string value);
    partial void OnImgChanged();
    #endregion
		
		public FlightFood()
		{
			this._FlightFoodReservation = new EntitySet<FlightFoodReservation>(new Action<FlightFoodReservation>(this.attach_FlightFoodReservation), new Action<FlightFoodReservation>(this.detach_FlightFoodReservation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FoodId
		{
			get
			{
				return this._FoodId;
			}
			set
			{
				if ((this._FoodId != value))
				{
					this.OnFoodIdChanging(value);
					this.SendPropertyChanging();
					this._FoodId = value;
					this.SendPropertyChanged("FoodId");
					this.OnFoodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightFood_FlightFoodReservation", Storage="_FlightFoodReservation", ThisKey="FoodId", OtherKey="FoodId")]
		public EntitySet<FlightFoodReservation> FlightFoodReservation
		{
			get
			{
				return this._FlightFoodReservation;
			}
			set
			{
				this._FlightFoodReservation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightFoodReservation(FlightFoodReservation entity)
		{
			this.SendPropertyChanging();
			entity.FlightFood = this;
		}
		
		private void detach_FlightFoodReservation(FlightFoodReservation entity)
		{
			this.SendPropertyChanging();
			entity.FlightFood = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlightFoodReservation")]
	public partial class FlightFoodReservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationId;
		
		private int _FoodId;
		
		private int _Amount;
		
		private EntityRef<FlightFood> _FlightFood;
		
		private EntityRef<FlightReservation> _FlightReservation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIdChanging(int value);
    partial void OnReservationIdChanged();
    partial void OnFoodIdChanging(int value);
    partial void OnFoodIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    #endregion
		
		public FlightFoodReservation()
		{
			this._FlightFood = default(EntityRef<FlightFood>);
			this._FlightReservation = default(EntityRef<FlightReservation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReservationId
		{
			get
			{
				return this._ReservationId;
			}
			set
			{
				if ((this._ReservationId != value))
				{
					if (this._FlightReservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIdChanging(value);
					this.SendPropertyChanging();
					this._ReservationId = value;
					this.SendPropertyChanged("ReservationId");
					this.OnReservationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FoodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FoodId
		{
			get
			{
				return this._FoodId;
			}
			set
			{
				if ((this._FoodId != value))
				{
					if (this._FlightFood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodIdChanging(value);
					this.SendPropertyChanging();
					this._FoodId = value;
					this.SendPropertyChanged("FoodId");
					this.OnFoodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightFood_FlightFoodReservation", Storage="_FlightFood", ThisKey="FoodId", OtherKey="FoodId", IsForeignKey=true)]
		public FlightFood FlightFood
		{
			get
			{
				return this._FlightFood.Entity;
			}
			set
			{
				FlightFood previousValue = this._FlightFood.Entity;
				if (((previousValue != value) 
							|| (this._FlightFood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightFood.Entity = null;
						previousValue.FlightFoodReservation.Remove(this);
					}
					this._FlightFood.Entity = value;
					if ((value != null))
					{
						value.FlightFoodReservation.Add(this);
						this._FoodId = value.FoodId;
					}
					else
					{
						this._FoodId = default(int);
					}
					this.SendPropertyChanged("FlightFood");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightReservation_FlightFoodReservation", Storage="_FlightReservation", ThisKey="ReservationId", OtherKey="ReservationId", IsForeignKey=true)]
		public FlightReservation FlightReservation
		{
			get
			{
				return this._FlightReservation.Entity;
			}
			set
			{
				FlightReservation previousValue = this._FlightReservation.Entity;
				if (((previousValue != value) 
							|| (this._FlightReservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightReservation.Entity = null;
						previousValue.FlightFoodReservation.Remove(this);
					}
					this._FlightReservation.Entity = value;
					if ((value != null))
					{
						value.FlightFoodReservation.Add(this);
						this._ReservationId = value.ReservationId;
					}
					else
					{
						this._ReservationId = default(int);
					}
					this.SendPropertyChanged("FlightReservation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlightReservation")]
	public partial class FlightReservation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationId;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _IDType;
		
		private string _IDTypeNumber;
		
		private string _CountryCode;
		
		private char _Gender;
		
		private string _Phone;
		
		private System.DateTime _Birthday;
		
		private string _ETicketNumber;
		
		private decimal _Payment;
		
		private int _CabinTypeId;
		
		private int _UserId;
		
		private int _ScheduleId;
		
		private System.Nullable<int> _SeatLayoutId;
		
		private EntitySet<FlightFoodReservation> _FlightFoodReservation;
		
		private EntityRef<Luggage> _Luggage;
		
		private EntityRef<CabinType> _CabinType;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<SeatLayout> _SeatLayout;
		
		private EntityRef<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIdChanging(int value);
    partial void OnReservationIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnIDTypeChanging(string value);
    partial void OnIDTypeChanged();
    partial void OnIDTypeNumberChanging(string value);
    partial void OnIDTypeNumberChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnGenderChanging(char value);
    partial void OnGenderChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnETicketNumberChanging(string value);
    partial void OnETicketNumberChanged();
    partial void OnPaymentChanging(decimal value);
    partial void OnPaymentChanged();
    partial void OnCabinTypeIdChanging(int value);
    partial void OnCabinTypeIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnSeatLayoutIdChanging(System.Nullable<int> value);
    partial void OnSeatLayoutIdChanged();
    #endregion
		
		public FlightReservation()
		{
			this._FlightFoodReservation = new EntitySet<FlightFoodReservation>(new Action<FlightFoodReservation>(this.attach_FlightFoodReservation), new Action<FlightFoodReservation>(this.detach_FlightFoodReservation));
			this._Luggage = default(EntityRef<Luggage>);
			this._CabinType = default(EntityRef<CabinType>);
			this._Country = default(EntityRef<Country>);
			this._Schedule = default(EntityRef<Schedule>);
			this._SeatLayout = default(EntityRef<SeatLayout>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReservationId
		{
			get
			{
				return this._ReservationId;
			}
			set
			{
				if ((this._ReservationId != value))
				{
					this.OnReservationIdChanging(value);
					this.SendPropertyChanging();
					this._ReservationId = value;
					this.SendPropertyChanged("ReservationId");
					this.OnReservationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string IDType
		{
			get
			{
				return this._IDType;
			}
			set
			{
				if ((this._IDType != value))
				{
					this.OnIDTypeChanging(value);
					this.SendPropertyChanging();
					this._IDType = value;
					this.SendPropertyChanged("IDType");
					this.OnIDTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTypeNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDTypeNumber
		{
			get
			{
				return this._IDTypeNumber;
			}
			set
			{
				if ((this._IDTypeNumber != value))
				{
					this.OnIDTypeNumberChanging(value);
					this.SendPropertyChanging();
					this._IDTypeNumber = value;
					this.SendPropertyChanged("IDTypeNumber");
					this.OnIDTypeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(3) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Char(1) NOT NULL")]
		public char Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ETicketNumber", DbType="Char(6) NOT NULL", CanBeNull=false)]
		public string ETicketNumber
		{
			get
			{
				return this._ETicketNumber;
			}
			set
			{
				if ((this._ETicketNumber != value))
				{
					this.OnETicketNumberChanging(value);
					this.SendPropertyChanging();
					this._ETicketNumber = value;
					this.SendPropertyChanged("ETicketNumber");
					this.OnETicketNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment", DbType="Decimal(10,2) NOT NULL")]
		public decimal Payment
		{
			get
			{
				return this._Payment;
			}
			set
			{
				if ((this._Payment != value))
				{
					this.OnPaymentChanging(value);
					this.SendPropertyChanging();
					this._Payment = value;
					this.SendPropertyChanged("Payment");
					this.OnPaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinTypeId", DbType="Int NOT NULL")]
		public int CabinTypeId
		{
			get
			{
				return this._CabinTypeId;
			}
			set
			{
				if ((this._CabinTypeId != value))
				{
					if (this._CabinType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCabinTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CabinTypeId = value;
					this.SendPropertyChanged("CabinTypeId");
					this.OnCabinTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", DbType="Int NOT NULL")]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatLayoutId", DbType="Int")]
		public System.Nullable<int> SeatLayoutId
		{
			get
			{
				return this._SeatLayoutId;
			}
			set
			{
				if ((this._SeatLayoutId != value))
				{
					if (this._SeatLayout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatLayoutIdChanging(value);
					this.SendPropertyChanging();
					this._SeatLayoutId = value;
					this.SendPropertyChanged("SeatLayoutId");
					this.OnSeatLayoutIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightReservation_FlightFoodReservation", Storage="_FlightFoodReservation", ThisKey="ReservationId", OtherKey="ReservationId")]
		public EntitySet<FlightFoodReservation> FlightFoodReservation
		{
			get
			{
				return this._FlightFoodReservation;
			}
			set
			{
				this._FlightFoodReservation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightReservation_Luggage", Storage="_Luggage", ThisKey="ReservationId", OtherKey="ReservationId", IsUnique=true, IsForeignKey=false)]
		public Luggage Luggage
		{
			get
			{
				return this._Luggage.Entity;
			}
			set
			{
				Luggage previousValue = this._Luggage.Entity;
				if (((previousValue != value) 
							|| (this._Luggage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Luggage.Entity = null;
						previousValue.FlightReservation = null;
					}
					this._Luggage.Entity = value;
					if ((value != null))
					{
						value.FlightReservation = this;
					}
					this.SendPropertyChanged("Luggage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CabinType_FlightReservation", Storage="_CabinType", ThisKey="CabinTypeId", OtherKey="CabinTypeId", IsForeignKey=true)]
		public CabinType CabinType
		{
			get
			{
				return this._CabinType.Entity;
			}
			set
			{
				CabinType previousValue = this._CabinType.Entity;
				if (((previousValue != value) 
							|| (this._CabinType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CabinType.Entity = null;
						previousValue.FlightReservation.Remove(this);
					}
					this._CabinType.Entity = value;
					if ((value != null))
					{
						value.FlightReservation.Add(this);
						this._CabinTypeId = value.CabinTypeId;
					}
					else
					{
						this._CabinTypeId = default(int);
					}
					this.SendPropertyChanged("CabinType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_FlightReservation", Storage="_Country", ThisKey="CountryCode", OtherKey="CountryCode", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.FlightReservation.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.FlightReservation.Add(this);
						this._CountryCode = value.CountryCode;
					}
					else
					{
						this._CountryCode = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_FlightReservation", Storage="_Schedule", ThisKey="ScheduleId", OtherKey="ScheduleId", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.FlightReservation.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.FlightReservation.Add(this);
						this._ScheduleId = value.ScheduleId;
					}
					else
					{
						this._ScheduleId = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeatLayout_FlightReservation", Storage="_SeatLayout", ThisKey="SeatLayoutId", OtherKey="Id", IsForeignKey=true)]
		public SeatLayout SeatLayout
		{
			get
			{
				return this._SeatLayout.Entity;
			}
			set
			{
				SeatLayout previousValue = this._SeatLayout.Entity;
				if (((previousValue != value) 
							|| (this._SeatLayout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SeatLayout.Entity = null;
						previousValue.FlightReservation.Remove(this);
					}
					this._SeatLayout.Entity = value;
					if ((value != null))
					{
						value.FlightReservation.Add(this);
						this._SeatLayoutId = value.Id;
					}
					else
					{
						this._SeatLayoutId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SeatLayout");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_FlightReservation", Storage="_Users", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.FlightReservation.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.FlightReservation.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightFoodReservation(FlightFoodReservation entity)
		{
			this.SendPropertyChanging();
			entity.FlightReservation = this;
		}
		
		private void detach_FlightFoodReservation(FlightFoodReservation entity)
		{
			this.SendPropertyChanging();
			entity.FlightReservation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlightStatus")]
	public partial class FlightStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleId;
		
		private System.DateTime _ActualArrivalTime;
		
		private EntityRef<Schedule> _Schedule;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnActualArrivalTimeChanging(System.DateTime value);
    partial void OnActualArrivalTimeChanged();
    #endregion
		
		public FlightStatus()
		{
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualArrivalTime", DbType="DateTime NOT NULL")]
		public System.DateTime ActualArrivalTime
		{
			get
			{
				return this._ActualArrivalTime;
			}
			set
			{
				if ((this._ActualArrivalTime != value))
				{
					this.OnActualArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ActualArrivalTime = value;
					this.SendPropertyChanged("ActualArrivalTime");
					this.OnActualArrivalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_FlightStatus", Storage="_Schedule", ThisKey="ScheduleId", OtherKey="ScheduleId", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.FlightStatus = null;
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.FlightStatus = this;
						this._ScheduleId = value.ScheduleId;
					}
					else
					{
						this._ScheduleId = default(int);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Luggage")]
	public partial class Luggage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReservationId;
		
		private int _Amount;
		
		private decimal _Weight;
		
		private decimal _Fee;
		
		private EntityRef<FlightReservation> _FlightReservation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReservationIdChanging(int value);
    partial void OnReservationIdChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnWeightChanging(decimal value);
    partial void OnWeightChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    #endregion
		
		public Luggage()
		{
			this._FlightReservation = default(EntityRef<FlightReservation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReservationId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ReservationId
		{
			get
			{
				return this._ReservationId;
			}
			set
			{
				if ((this._ReservationId != value))
				{
					if (this._FlightReservation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReservationIdChanging(value);
					this.SendPropertyChanging();
					this._ReservationId = value;
					this.SendPropertyChanged("ReservationId");
					this.OnReservationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(10,2) NOT NULL")]
		public decimal Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="Decimal(10,2) NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FlightReservation_Luggage", Storage="_FlightReservation", ThisKey="ReservationId", OtherKey="ReservationId", IsForeignKey=true)]
		public FlightReservation FlightReservation
		{
			get
			{
				return this._FlightReservation.Entity;
			}
			set
			{
				FlightReservation previousValue = this._FlightReservation.Entity;
				if (((previousValue != value) 
							|| (this._FlightReservation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightReservation.Entity = null;
						previousValue.Luggage = null;
					}
					this._FlightReservation.Entity = value;
					if ((value != null))
					{
						value.Luggage = this;
						this._ReservationId = value.ReservationId;
					}
					else
					{
						this._ReservationId = default(int);
					}
					this.SendPropertyChanged("FlightReservation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoldId;
		
		private string _RoleName;
		
		private EntitySet<Users> _Users;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoldIdChanging(int value);
    partial void OnRoldIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoldId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoldId
		{
			get
			{
				return this._RoldId;
			}
			set
			{
				if ((this._RoldId != value))
				{
					this.OnRoldIdChanging(value);
					this.SendPropertyChanging();
					this._RoldId = value;
					this.SendPropertyChanged("RoldId");
					this.OnRoldIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Users", Storage="_Users", ThisKey="RoldId", OtherKey="RoleId")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RouteId;
		
		private string _DepartureAirportIATA;
		
		private string _ArrivalAirportIATA;
		
		private int _Distance;
		
		private int _FlightTime;
		
		private EntitySet<Schedule> _Schedule;
		
		private EntityRef<Airport> _Airport;
		
		private EntityRef<Airport> _Airport1;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    partial void OnDepartureAirportIATAChanging(string value);
    partial void OnDepartureAirportIATAChanged();
    partial void OnArrivalAirportIATAChanging(string value);
    partial void OnArrivalAirportIATAChanged();
    partial void OnDistanceChanging(int value);
    partial void OnDistanceChanged();
    partial void OnFlightTimeChanging(int value);
    partial void OnFlightTimeChanged();
    #endregion
		
		public Route()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			this._Airport = default(EntityRef<Airport>);
			this._Airport1 = default(EntityRef<Airport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartureAirportIATA", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string DepartureAirportIATA
		{
			get
			{
				return this._DepartureAirportIATA;
			}
			set
			{
				if ((this._DepartureAirportIATA != value))
				{
					if (this._Airport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartureAirportIATAChanging(value);
					this.SendPropertyChanging();
					this._DepartureAirportIATA = value;
					this.SendPropertyChanged("DepartureAirportIATA");
					this.OnDepartureAirportIATAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalAirportIATA", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ArrivalAirportIATA
		{
			get
			{
				return this._ArrivalAirportIATA;
			}
			set
			{
				if ((this._ArrivalAirportIATA != value))
				{
					if (this._Airport1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArrivalAirportIATAChanging(value);
					this.SendPropertyChanging();
					this._ArrivalAirportIATA = value;
					this.SendPropertyChanged("ArrivalAirportIATA");
					this.OnArrivalAirportIATAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Int NOT NULL")]
		public int Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightTime", DbType="Int NOT NULL")]
		public int FlightTime
		{
			get
			{
				return this._FlightTime;
			}
			set
			{
				if ((this._FlightTime != value))
				{
					this.OnFlightTimeChanging(value);
					this.SendPropertyChanging();
					this._FlightTime = value;
					this.SendPropertyChanged("FlightTime");
					this.OnFlightTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Schedule", ThisKey="RouteId", OtherKey="RouteId")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Route", Storage="_Airport", ThisKey="DepartureAirportIATA", OtherKey="IATACode", IsForeignKey=true)]
		public Airport Airport
		{
			get
			{
				return this._Airport.Entity;
			}
			set
			{
				Airport previousValue = this._Airport.Entity;
				if (((previousValue != value) 
							|| (this._Airport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport.Entity = null;
						previousValue.Route.Remove(this);
					}
					this._Airport.Entity = value;
					if ((value != null))
					{
						value.Route.Add(this);
						this._DepartureAirportIATA = value.IATACode;
					}
					else
					{
						this._DepartureAirportIATA = default(string);
					}
					this.SendPropertyChanged("Airport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Route1", Storage="_Airport1", ThisKey="ArrivalAirportIATA", OtherKey="IATACode", IsForeignKey=true)]
		public Airport Airport1
		{
			get
			{
				return this._Airport1.Entity;
			}
			set
			{
				Airport previousValue = this._Airport1.Entity;
				if (((previousValue != value) 
							|| (this._Airport1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport1.Entity = null;
						previousValue.Route1.Remove(this);
					}
					this._Airport1.Entity = value;
					if ((value != null))
					{
						value.Route1.Add(this);
						this._ArrivalAirportIATA = value.IATACode;
					}
					else
					{
						this._ArrivalAirportIATA = default(string);
					}
					this.SendPropertyChanged("Airport1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScheduleId;
		
		private System.DateTime _Date;
		
		private System.TimeSpan _Time;
		
		private int _AircraftId;
		
		private int _RouteId;
		
		private decimal _EconomyPrice;
		
		private string _FlightNumber;
		
		private string _Gate;
		
		private string _Status;
		
		private EntitySet<FlightReservation> _FlightReservation;
		
		private EntityRef<FlightStatus> _FlightStatus;
		
		private EntityRef<Aircraft> _Aircraft;
		
		private EntityRef<Route> _Route;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScheduleIdChanging(int value);
    partial void OnScheduleIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.TimeSpan value);
    partial void OnTimeChanged();
    partial void OnAircraftIdChanging(int value);
    partial void OnAircraftIdChanged();
    partial void OnRouteIdChanging(int value);
    partial void OnRouteIdChanged();
    partial void OnEconomyPriceChanging(decimal value);
    partial void OnEconomyPriceChanged();
    partial void OnFlightNumberChanging(string value);
    partial void OnFlightNumberChanged();
    partial void OnGateChanging(string value);
    partial void OnGateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Schedule()
		{
			this._FlightReservation = new EntitySet<FlightReservation>(new Action<FlightReservation>(this.attach_FlightReservation), new Action<FlightReservation>(this.detach_FlightReservation));
			this._FlightStatus = default(EntityRef<FlightStatus>);
			this._Aircraft = default(EntityRef<Aircraft>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScheduleId
		{
			get
			{
				return this._ScheduleId;
			}
			set
			{
				if ((this._ScheduleId != value))
				{
					this.OnScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ScheduleId = value;
					this.SendPropertyChanged("ScheduleId");
					this.OnScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Time NOT NULL")]
		public System.TimeSpan Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AircraftId", DbType="Int NOT NULL")]
		public int AircraftId
		{
			get
			{
				return this._AircraftId;
			}
			set
			{
				if ((this._AircraftId != value))
				{
					if (this._Aircraft.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAircraftIdChanging(value);
					this.SendPropertyChanging();
					this._AircraftId = value;
					this.SendPropertyChanged("AircraftId");
					this.OnAircraftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteId", DbType="Int NOT NULL")]
		public int RouteId
		{
			get
			{
				return this._RouteId;
			}
			set
			{
				if ((this._RouteId != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIdChanging(value);
					this.SendPropertyChanging();
					this._RouteId = value;
					this.SendPropertyChanged("RouteId");
					this.OnRouteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EconomyPrice", DbType="Decimal(10,2) NOT NULL")]
		public decimal EconomyPrice
		{
			get
			{
				return this._EconomyPrice;
			}
			set
			{
				if ((this._EconomyPrice != value))
				{
					this.OnEconomyPriceChanging(value);
					this.SendPropertyChanging();
					this._EconomyPrice = value;
					this.SendPropertyChanged("EconomyPrice");
					this.OnEconomyPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FlightNumber
		{
			get
			{
				return this._FlightNumber;
			}
			set
			{
				if ((this._FlightNumber != value))
				{
					this.OnFlightNumberChanging(value);
					this.SendPropertyChanging();
					this._FlightNumber = value;
					this.SendPropertyChanged("FlightNumber");
					this.OnFlightNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gate", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Gate
		{
			get
			{
				return this._Gate;
			}
			set
			{
				if ((this._Gate != value))
				{
					this.OnGateChanging(value);
					this.SendPropertyChanging();
					this._Gate = value;
					this.SendPropertyChanged("Gate");
					this.OnGateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_FlightReservation", Storage="_FlightReservation", ThisKey="ScheduleId", OtherKey="ScheduleId")]
		public EntitySet<FlightReservation> FlightReservation
		{
			get
			{
				return this._FlightReservation;
			}
			set
			{
				this._FlightReservation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_FlightStatus", Storage="_FlightStatus", ThisKey="ScheduleId", OtherKey="ScheduleId", IsUnique=true, IsForeignKey=false)]
		public FlightStatus FlightStatus
		{
			get
			{
				return this._FlightStatus.Entity;
			}
			set
			{
				FlightStatus previousValue = this._FlightStatus.Entity;
				if (((previousValue != value) 
							|| (this._FlightStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FlightStatus.Entity = null;
						previousValue.Schedule = null;
					}
					this._FlightStatus.Entity = value;
					if ((value != null))
					{
						value.Schedule = this;
					}
					this.SendPropertyChanged("FlightStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aircraft_Schedule", Storage="_Aircraft", ThisKey="AircraftId", OtherKey="AircraftId", IsForeignKey=true)]
		public Aircraft Aircraft
		{
			get
			{
				return this._Aircraft.Entity;
			}
			set
			{
				Aircraft previousValue = this._Aircraft.Entity;
				if (((previousValue != value) 
							|| (this._Aircraft.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aircraft.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Aircraft.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._AircraftId = value.AircraftId;
					}
					else
					{
						this._AircraftId = default(int);
					}
					this.SendPropertyChanged("Aircraft");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Schedule", Storage="_Route", ThisKey="RouteId", OtherKey="RouteId", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._RouteId = value.RouteId;
					}
					else
					{
						this._RouteId = default(int);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeatLayout")]
	public partial class SeatLayout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _RowNumber;
		
		private string _ColumnName;
		
		private int _CabinTypeId;
		
		private int _AircraftId;
		
		private EntitySet<FlightReservation> _FlightReservation;
		
		private EntityRef<Aircraft> _Aircraft;
		
		private EntityRef<CabinType> _CabinType;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRowNumberChanging(int value);
    partial void OnRowNumberChanged();
    partial void OnColumnNameChanging(string value);
    partial void OnColumnNameChanged();
    partial void OnCabinTypeIdChanging(int value);
    partial void OnCabinTypeIdChanged();
    partial void OnAircraftIdChanging(int value);
    partial void OnAircraftIdChanged();
    #endregion
		
		public SeatLayout()
		{
			this._FlightReservation = new EntitySet<FlightReservation>(new Action<FlightReservation>(this.attach_FlightReservation), new Action<FlightReservation>(this.detach_FlightReservation));
			this._Aircraft = default(EntityRef<Aircraft>);
			this._CabinType = default(EntityRef<CabinType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int NOT NULL")]
		public int RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColumnName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ColumnName
		{
			get
			{
				return this._ColumnName;
			}
			set
			{
				if ((this._ColumnName != value))
				{
					this.OnColumnNameChanging(value);
					this.SendPropertyChanging();
					this._ColumnName = value;
					this.SendPropertyChanged("ColumnName");
					this.OnColumnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CabinTypeId", DbType="Int NOT NULL")]
		public int CabinTypeId
		{
			get
			{
				return this._CabinTypeId;
			}
			set
			{
				if ((this._CabinTypeId != value))
				{
					if (this._CabinType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCabinTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CabinTypeId = value;
					this.SendPropertyChanged("CabinTypeId");
					this.OnCabinTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AircraftId", DbType="Int NOT NULL")]
		public int AircraftId
		{
			get
			{
				return this._AircraftId;
			}
			set
			{
				if ((this._AircraftId != value))
				{
					if (this._Aircraft.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAircraftIdChanging(value);
					this.SendPropertyChanging();
					this._AircraftId = value;
					this.SendPropertyChanged("AircraftId");
					this.OnAircraftIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SeatLayout_FlightReservation", Storage="_FlightReservation", ThisKey="Id", OtherKey="SeatLayoutId")]
		public EntitySet<FlightReservation> FlightReservation
		{
			get
			{
				return this._FlightReservation;
			}
			set
			{
				this._FlightReservation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aircraft_SeatLayout", Storage="_Aircraft", ThisKey="AircraftId", OtherKey="AircraftId", IsForeignKey=true)]
		public Aircraft Aircraft
		{
			get
			{
				return this._Aircraft.Entity;
			}
			set
			{
				Aircraft previousValue = this._Aircraft.Entity;
				if (((previousValue != value) 
							|| (this._Aircraft.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aircraft.Entity = null;
						previousValue.SeatLayout.Remove(this);
					}
					this._Aircraft.Entity = value;
					if ((value != null))
					{
						value.SeatLayout.Add(this);
						this._AircraftId = value.AircraftId;
					}
					else
					{
						this._AircraftId = default(int);
					}
					this.SendPropertyChanged("Aircraft");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CabinType_SeatLayout", Storage="_CabinType", ThisKey="CabinTypeId", OtherKey="CabinTypeId", IsForeignKey=true)]
		public CabinType CabinType
		{
			get
			{
				return this._CabinType.Entity;
			}
			set
			{
				CabinType previousValue = this._CabinType.Entity;
				if (((previousValue != value) 
							|| (this._CabinType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CabinType.Entity = null;
						previousValue.SeatLayout.Remove(this);
					}
					this._CabinType.Entity = value;
					if ((value != null))
					{
						value.SeatLayout.Add(this);
						this._CabinTypeId = value.CabinTypeId;
					}
					else
					{
						this._CabinTypeId = default(int);
					}
					this.SendPropertyChanged("CabinType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.SeatLayout = this;
		}
		
		private void detach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.SeatLayout = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Email;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Password;
		
		private string _Gender;
		
		private System.DateTime _DateOfBirth;
		
		private string _Phone;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _Address;
		
		private int _RoleId;
		
		private EntitySet<FlightReservation> _FlightReservation;
		
		private EntityRef<Role> _Role;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public Users()
		{
			this._FlightReservation = new EntitySet<FlightReservation>(new Action<FlightReservation>(this.attach_FlightReservation), new Action<FlightReservation>(this.detach_FlightReservation));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_FlightReservation", Storage="_FlightReservation", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<FlightReservation> FlightReservation
		{
			get
			{
				return this._FlightReservation;
			}
			set
			{
				this._FlightReservation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Users", Storage="_Role", ThisKey="RoleId", OtherKey="RoldId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoldId;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_FlightReservation(FlightReservation entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
}
#pragma warning restore 1591
